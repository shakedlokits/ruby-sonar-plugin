<rules>
    <rule>
        <key>Style/AccessModifierIndentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check indentation of private/protected visibility modifiers.]]></name>
        <description><![CDATA[Check indentation of private/protected visibility modifiers.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/AccessorMethodName</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check the naming of accessor methods for get_/set_.]]></name>
        <description><![CDATA[Check the naming of accessor methods for get_/set_.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Alias</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use alias instead of alias_method.]]></name>
        <description><![CDATA[Use alias instead of alias_method.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/AlignArray</key>
        <priority>MINOR</priority>
        <name><![CDATA[Align the elements of an array literal if they span more than one line.]]></name>
        <description><![CDATA[Align the elements of an array literal if they span more than one line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/AlignHash</key>
        <priority>MINOR</priority>
        <name><![CDATA[Align the elements of a hash literal if they span more than one line.]]></name>
        <description><![CDATA[Align the elements of a hash literal if they span more than one line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/AlignParameters</key>
        <priority>MINOR</priority>
        <name><![CDATA[Align the parameters of a method call if they span more than one line.]]></name>
        <description><![CDATA[Align the parameters of a method call if they span more than one line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/AndOr</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use &&/|| instead of and/or.]]></name>
        <description><![CDATA[Use &&/|| instead of and/or.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ArrayJoin</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use Array#join instead of Array#*.]]></name>
        <description><![CDATA[Use Array#join instead of Array#*.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/AsciiComments</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use only ascii symbols in comments.]]></name>
        <description><![CDATA[Use only ascii symbols in comments.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/AsciiIdentifiers</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use only ascii symbols in identifiers.]]></name>
        <description><![CDATA[Use only ascii symbols in identifiers.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Attr</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for uses of Module#attr.]]></name>
        <description><![CDATA[Checks for uses of Module#attr.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/BeginBlock</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid the use of BEGIN blocks.]]></name>
        <description><![CDATA[Avoid the use of BEGIN blocks.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/BarePercentLiterals</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks if usage of %() or %Q() matches configuration.]]></name>
        <description><![CDATA[Checks if usage of %() or %Q() matches configuration.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/BlockComments</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use block comments.]]></name>
        <description><![CDATA[Do not use block comments.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/BlockEndNewline</key>
        <priority>MINOR</priority>
        <name><![CDATA[Put end statement of multiline block on its own line.]]></name>
        <description><![CDATA[Put end statement of multiline block on its own line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/BlockDelimiters</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid using {...} for multi-line blocks (multiline chaining is always ugly). Prefer {...} over do...end for single-line blocks.]]></name>
        <description><![CDATA[Avoid using {...} for multi-line blocks (multiline chaining is always ugly). Prefer {...} over do...end for single-line blocks.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/BracesAroundHashParameters</key>
        <priority>MINOR</priority>
        <name><![CDATA[Enforce braces style around hash parameters.]]></name>
        <description><![CDATA[Enforce braces style around hash parameters.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/CaseEquality</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid explicit use of the case equality operator(===).]]></name>
        <description><![CDATA[Avoid explicit use of the case equality operator(===).]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/CaseIndentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Indentation of when in a case/when/[else/]end.]]></name>
        <description><![CDATA[Indentation of when in a case/when/[else/]end.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/CharacterLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for uses of character literals.]]></name>
        <description><![CDATA[Checks for uses of character literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ClassAndModuleCamelCase</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use CamelCase for classes and modules.]]></name>
        <description><![CDATA[Use CamelCase for classes and modules.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ClassAndModuleChildren</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks style of children classes and modules.]]></name>
        <description><![CDATA[Checks style of children classes and modules.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ClassCheck</key>
        <priority>MINOR</priority>
        <name><![CDATA[Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.]]></name>
        <description><![CDATA[Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ClassMethods</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use self when defining module/class methods.]]></name>
        <description><![CDATA[Use self when defining module/class methods.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ClassVars</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid the use of class variables.]]></name>
        <description><![CDATA[Avoid the use of class variables.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ClosingParenthesisIndentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the indentation of hanging closing parentheses.]]></name>
        <description><![CDATA[Checks the indentation of hanging closing parentheses.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ColonMethodCall</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use :: for method call.]]></name>
        <description><![CDATA[Do not use :: for method call.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/CommandLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `` or %x around command literals.]]></name>
        <description><![CDATA[Use `` or %x around command literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/CommentAnnotation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks formatting of special comments (TODO, FIXME, OPTIMIZE, HACK, REVIEW).]]></name>
        <description><![CDATA[Checks formatting of special comments (TODO, FIXME, OPTIMIZE, HACK, REVIEW).]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/CommentIndentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Indentation of comments.]]></name>
        <description><![CDATA[Indentation of comments.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ConditionalAssignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use the return value of `if` and `case` statements for assignment to a variable and variable comparison instead of assigning that variable inside of each branch.]]></name>
        <description><![CDATA[Use the return value of `if` and `case` statements for assignment to a variable and variable comparison instead of assigning that variable inside of each branch.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ConstantName</key>
        <priority>MINOR</priority>
        <name><![CDATA[Constants should use SCREAMING_SNAKE_CASE.]]></name>
        <description><![CDATA[Constants should use SCREAMING_SNAKE_CASE.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/DefWithParentheses</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use def with parentheses when there are arguments.]]></name>
        <description><![CDATA[Use def with parentheses when there are arguments.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Documentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Document classes and non-namespace modules.]]></name>
        <description><![CDATA[Document classes and non-namespace modules.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/DotPosition</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the position of the dot in multi-line method calls.]]></name>
        <description><![CDATA[Checks the position of the dot in multi-line method calls.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/DoubleNegation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for uses of double negation (!!).]]></name>
        <description><![CDATA[Checks for uses of double negation (!!).]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EachForSimpleLoop</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `Integer#times` for a simple loop which iterates a fixed number of times.]]></name>
        <description><![CDATA[Use `Integer#times` for a simple loop which iterates a fixed number of times.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EachWithObject</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer `each_with_object` over `inject` or `reduce`.]]></name>
        <description><![CDATA[Prefer `each_with_object` over `inject` or `reduce`.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ElseAlignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Align elses and elsifs correctly.]]></name>
        <description><![CDATA[Align elses and elsifs correctly.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyElse</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid empty else-clauses.]]></name>
        <description><![CDATA[Avoid empty else-clauses.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyCaseCondition</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid empty condition in case statements.]]></name>
        <description><![CDATA[Avoid empty condition in case statements.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLineBetweenDefs</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use empty lines between defs.]]></name>
        <description><![CDATA[Use empty lines between defs.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLines</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't use several empty lines in a row.]]></name>
        <description><![CDATA[Don't use several empty lines in a row.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLinesAroundAccessModifier</key>
        <priority>MINOR</priority>
        <name><![CDATA[Keep blank lines around access modifiers.]]></name>
        <description><![CDATA[Keep blank lines around access modifiers.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLinesAroundBeginBody</key>
        <priority>MINOR</priority>
        <name><![CDATA[Keeps track of empty lines around begin-end bodies.]]></name>
        <description><![CDATA[Keeps track of empty lines around begin-end bodies.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLinesAroundBlockBody</key>
        <priority>MINOR</priority>
        <name><![CDATA[Keeps track of empty lines around block bodies.]]></name>
        <description><![CDATA[Keeps track of empty lines around block bodies.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLinesAroundClassBody</key>
        <priority>MINOR</priority>
        <name><![CDATA[Keeps track of empty lines around class bodies.]]></name>
        <description><![CDATA[Keeps track of empty lines around class bodies.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLinesAroundExceptionHandlingKeywords</key>
        <priority>MINOR</priority>
        <name><![CDATA[Keeps track of empty lines around exception handling keywords.]]></name>
        <description><![CDATA[Keeps track of empty lines around exception handling keywords.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLinesAroundModuleBody</key>
        <priority>MINOR</priority>
        <name><![CDATA[Keeps track of empty lines around module bodies.]]></name>
        <description><![CDATA[Keeps track of empty lines around module bodies.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLinesAroundMethodBody</key>
        <priority>MINOR</priority>
        <name><![CDATA[Keeps track of empty lines around method bodies.]]></name>
        <description><![CDATA[Keeps track of empty lines around method bodies.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer literals to Array.new/Hash.new/String.new.]]></name>
        <description><![CDATA[Prefer literals to Array.new/Hash.new/String.new.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyMethod</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the formatting of empty method definitions.]]></name>
        <description><![CDATA[Checks the formatting of empty method definitions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EndBlock</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid the use of END blocks.]]></name>
        <description><![CDATA[Avoid the use of END blocks.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EndOfLine</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use Unix-style line endings.]]></name>
        <description><![CDATA[Use Unix-style line endings.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EvenOdd</key>
        <priority>MINOR</priority>
        <name><![CDATA[Favor the use of Integer#even? && Integer#odd?]]></name>
        <description><![CDATA[Favor the use of Integer#even? && Integer#odd?]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ExtraSpacing</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use unnecessary spacing.]]></name>
        <description><![CDATA[Do not use unnecessary spacing.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/FileName</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use snake_case for source file names.]]></name>
        <description><![CDATA[Use snake_case for source file names.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/FrozenStringLiteralComment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Add the frozen_string_literal comment to the top of files to help transition from Ruby 2.3.0 to Ruby 3.0.]]></name>
        <description><![CDATA[Add the frozen_string_literal comment to the top of files to help transition from Ruby 2.3.0 to Ruby 3.0.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/InitialIndentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the indentation of the first non-blank non-comment line in a file.]]></name>
        <description><![CDATA[Checks the indentation of the first non-blank non-comment line in a file.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/FirstParameterIndentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the indentation of the first parameter in a method call.]]></name>
        <description><![CDATA[Checks the indentation of the first parameter in a method call.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/FlipFlop</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for flip flops]]></name>
        <description><![CDATA[Checks for flip flops]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/For</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks use of for or each in multiline loops.]]></name>
        <description><![CDATA[Checks use of for or each in multiline loops.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/FormatString</key>
        <priority>MINOR</priority>
        <name><![CDATA[Enforce the use of Kernel#sprintf, Kernel#format or String#%.]]></name>
        <description><![CDATA[Enforce the use of Kernel#sprintf, Kernel#format or String#%.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/GlobalVars</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not introduce global variables.]]></name>
        <description><![CDATA[Do not introduce global variables.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/GuardClause</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for conditionals that can be replaced with guard clauses]]></name>
        <description><![CDATA[Check for conditionals that can be replaced with guard clauses]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/HashSyntax</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax { :a => 1, :b => 2 }.]]></name>
        <description><![CDATA[Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax { :a => 1, :b => 2 }.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IfInsideElse</key>
        <priority>MINOR</priority>
        <name><![CDATA[Finds if nodes inside else, which can be converted to elsif.]]></name>
        <description><![CDATA[Finds if nodes inside else, which can be converted to elsif.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IfUnlessModifier</key>
        <priority>MINOR</priority>
        <name><![CDATA[Favor modifier if/unless usage when you have a single-line body.]]></name>
        <description><![CDATA[Favor modifier if/unless usage when you have a single-line body.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IfUnlessModifierOfIfUnless</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid modifier if/unless usage on conditionals.]]></name>
        <description><![CDATA[Avoid modifier if/unless usage on conditionals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IfWithSemicolon</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use if x; .... Use the ternary operator instead.]]></name>
        <description><![CDATA[Do not use if x; .... Use the ternary operator instead.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IndentationConsistency</key>
        <priority>MINOR</priority>
        <name><![CDATA[Keep indentation straight.]]></name>
        <description><![CDATA[Keep indentation straight.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IndentationWidth</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use 2 spaces for indentation.]]></name>
        <description><![CDATA[Use 2 spaces for indentation.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IdenticalConditionalBranches</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.]]></name>
        <description><![CDATA[Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IndentArray</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the indentation of the first element in an array literal.]]></name>
        <description><![CDATA[Checks the indentation of the first element in an array literal.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IndentAssignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the indentation of the first line of the right-hand-side of a multi-line assignment.]]></name>
        <description><![CDATA[Checks the indentation of the first line of the right-hand-side of a multi-line assignment.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IndentHash</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the indentation of the first key in a hash literal.]]></name>
        <description><![CDATA[Checks the indentation of the first key in a hash literal.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/IndentHeredoc</key>
        <priority>MINOR</priority>
        <name><![CDATA[This cops checks the indentation of the here document bodies.]]></name>
        <description><![CDATA[This cops checks the indentation of the here document bodies.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/InfiniteLoop</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use Kernel#loop for infinite loops.]]></name>
        <description><![CDATA[Use Kernel#loop for infinite loops.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/InverseMethods</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use the inverse method instead of `!.method` if an inverse method is defined.]]></name>
        <description><![CDATA[Use the inverse method instead of `!.method` if an inverse method is defined.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Lambda</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use the new lambda literal syntax for single-line blocks.]]></name>
        <description><![CDATA[Use the new lambda literal syntax for single-line blocks.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInLambdaLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for spaces in lambda literals.]]></name>
        <description><![CDATA[Checks for spaces in lambda literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/LambdaCall</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use lambda.call(...) instead of lambda.(...).]]></name>
        <description><![CDATA[Use lambda.call(...) instead of lambda.(...).]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/LeadingCommentSpace</key>
        <priority>MINOR</priority>
        <name><![CDATA[Comments should start with a space.]]></name>
        <description><![CDATA[Comments should start with a space.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/LineEndConcatenation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use \ instead of + or << to concatenate two string literals at line end.]]></name>
        <description><![CDATA[Use \ instead of + or << to concatenate two string literals at line end.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MethodCallWithoutArgsParentheses</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use parentheses for method calls with no arguments.]]></name>
        <description><![CDATA[Do not use parentheses for method calls with no arguments.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MethodDefParentheses</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks if the method definitions have or don't have parentheses.]]></name>
        <description><![CDATA[Checks if the method definitions have or don't have parentheses.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MethodName</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use the configured style when naming methods.]]></name>
        <description><![CDATA[Use the configured style when naming methods.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MethodMissing</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid using `method_missing`.]]></name>
        <description><![CDATA[Avoid using `method_missing`.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MixinGrouping</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for grouping of mixins in `class` and `module` bodies.]]></name>
        <description><![CDATA[Checks for grouping of mixins in `class` and `module` bodies.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ModuleFunction</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for usage of `extend self` in modules.]]></name>
        <description><![CDATA[Checks for usage of `extend self` in modules.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineArrayBraceLayout</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that the closing brace in an array literal is either on the same line as the last array element, or a new line.]]></name>
        <description><![CDATA[Checks that the closing brace in an array literal is either on the same line as the last array element, or a new line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineBlockChain</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid multi-line chains of blocks.]]></name>
        <description><![CDATA[Avoid multi-line chains of blocks.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineBlockLayout</key>
        <priority>MINOR</priority>
        <name><![CDATA[Ensures newlines after multiline block do statements.]]></name>
        <description><![CDATA[Ensures newlines after multiline block do statements.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineHashBraceLayout</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.]]></name>
        <description><![CDATA[Checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineIfThen</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use then for multi-line if/unless.]]></name>
        <description><![CDATA[Do not use then for multi-line if/unless.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineIfModifier</key>
        <priority>MINOR</priority>
        <name><![CDATA[Only use if/unless modifiers on single line statements.]]></name>
        <description><![CDATA[Only use if/unless modifiers on single line statements.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineMemoization</key>
        <priority>MINOR</priority>
        <name><![CDATA[Wrap multiline memoizations in a `begin` and `end` block.]]></name>
        <description><![CDATA[Wrap multiline memoizations in a `begin` and `end` block.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineMethodCallBraceLayout</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.]]></name>
        <description><![CDATA[Checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineMethodCallIndentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks indentation of method calls with the dot operator that span more than one line.]]></name>
        <description><![CDATA[Checks indentation of method calls with the dot operator that span more than one line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineMethodDefinitionBraceLayout</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.]]></name>
        <description><![CDATA[Checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineOperationIndentation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks indentation of binary operations that span more than one line.]]></name>
        <description><![CDATA[Checks indentation of binary operations that span more than one line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MultilineTernaryOperator</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid multi-line ?: (the ternary operator); use if/unless instead.]]></name>
        <description><![CDATA[Avoid multi-line ?: (the ternary operator); use if/unless instead.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/MutableConstant</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not assign mutable objects to constants.]]></name>
        <description><![CDATA[Do not assign mutable objects to constants.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NegatedIf</key>
        <priority>MINOR</priority>
        <name><![CDATA[Favor unless over if for negative conditions (or control flow or).]]></name>
        <description><![CDATA[Favor unless over if for negative conditions (or control flow or).]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NegatedWhile</key>
        <priority>MINOR</priority>
        <name><![CDATA[Favor until over while for negative conditions.]]></name>
        <description><![CDATA[Favor until over while for negative conditions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NestedModifier</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid using nested modifiers.]]></name>
        <description><![CDATA[Avoid using nested modifiers.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NestedParenthesizedCalls</key>
        <priority>MINOR</priority>
        <name><![CDATA[Parenthesize method calls which are nested inside the argument list of another parenthesized method call.]]></name>
        <description><![CDATA[Parenthesize method calls which are nested inside the argument list of another parenthesized method call.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NestedTernaryOperator</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use one expression per branch in a ternary operator.]]></name>
        <description><![CDATA[Use one expression per branch in a ternary operator.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/EmptyLineAfterMagicComment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Add a newline after magic comments to separate them from code.]]></name>
        <description><![CDATA[Add a newline after magic comments to separate them from code.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Next</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `next` to skip iteration instead of a condition at the end.]]></name>
        <description><![CDATA[Use `next` to skip iteration instead of a condition at the end.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NilComparison</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer x.nil? to x == nil.]]></name>
        <description><![CDATA[Prefer x.nil? to x == nil.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NonNilCheck</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for redundant nil checks.]]></name>
        <description><![CDATA[Checks for redundant nil checks.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Not</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use ! instead of not.]]></name>
        <description><![CDATA[Use ! instead of not.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NumericLiterals</key>
        <priority>MINOR</priority>
        <name><![CDATA[Add underscores to large numeric literals to improve their readability.]]></name>
        <description><![CDATA[Add underscores to large numeric literals to improve their readability.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NumericLiteralPrefix</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use smallcase prefixes for numeric literals.]]></name>
        <description><![CDATA[Use smallcase prefixes for numeric literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/NumericPredicate</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for the use of predicate- or comparison methods for numeric comparisons.]]></name>
        <description><![CDATA[Checks for the use of predicate- or comparison methods for numeric comparisons.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/OneLineConditional</key>
        <priority>MINOR</priority>
        <name><![CDATA[Favor the ternary operator(?:) over if/then/else/end constructs.]]></name>
        <description><![CDATA[Favor the ternary operator(?:) over if/then/else/end constructs.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/OpMethod</key>
        <priority>MINOR</priority>
        <name><![CDATA[When defining binary operators, name the argument other.]]></name>
        <description><![CDATA[When defining binary operators, name the argument other.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/OptionalArguments</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for optional arguments that do not appear at the end of the argument list]]></name>
        <description><![CDATA[Checks for optional arguments that do not appear at the end of the argument list]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ParallelAssignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.]]></name>
        <description><![CDATA[Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ParenthesesAroundCondition</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't use parentheses around the condition of an if/unless/while.]]></name>
        <description><![CDATA[Don't use parentheses around the condition of an if/unless/while.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/PercentLiteralDelimiters</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `%`-literal delimiters consistently]]></name>
        <description><![CDATA[Use `%`-literal delimiters consistently]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/PercentQLiterals</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks if uses of %Q/%q match the configured preference.]]></name>
        <description><![CDATA[Checks if uses of %Q/%q match the configured preference.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/PerlBackrefs</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid Perl-style regex back references.]]></name>
        <description><![CDATA[Avoid Perl-style regex back references.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/PredicateName</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check the names of predicate methods.]]></name>
        <description><![CDATA[Check the names of predicate methods.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/PreferredHashMethods</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks use of `has_key?` and `has_value?` Hash methods.]]></name>
        <description><![CDATA[Checks use of `has_key?` and `has_value?` Hash methods.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Proc</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use proc instead of Proc.new.]]></name>
        <description><![CDATA[Use proc instead of Proc.new.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RaiseArgs</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the arguments passed to raise/fail.]]></name>
        <description><![CDATA[Checks the arguments passed to raise/fail.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RedundantBegin</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't use begin blocks when they are not needed.]]></name>
        <description><![CDATA[Don't use begin blocks when they are not needed.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RedundantException</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for an obsolete RuntimeException argument in raise/fail.]]></name>
        <description><![CDATA[Checks for an obsolete RuntimeException argument in raise/fail.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RedundantFreeze</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks usages of Object#freeze on immutable objects.]]></name>
        <description><![CDATA[Checks usages of Object#freeze on immutable objects.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RedundantParentheses</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for parentheses that seem not to serve any purpose.]]></name>
        <description><![CDATA[Checks for parentheses that seem not to serve any purpose.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RedundantReturn</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't use return where it's not required.]]></name>
        <description><![CDATA[Don't use return where it's not required.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RedundantSelf</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't use self where it's not needed.]]></name>
        <description><![CDATA[Don't use self where it's not needed.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RegexpLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use / or %r around regular expressions.]]></name>
        <description><![CDATA[Use / or %r around regular expressions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RescueEnsureAlignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Align rescues and ensures correctly.]]></name>
        <description><![CDATA[Align rescues and ensures correctly.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/RescueModifier</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid using rescue in its modifier form.]]></name>
        <description><![CDATA[Avoid using rescue in its modifier form.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SafeNavigation</key>
        <priority>MINOR</priority>
        <name><![CDATA[This cop transforms usages of a method call safeguarded by a check for the existance of the object to safe navigation (`&.`).]]></name>
        <description><![CDATA[This cop transforms usages of a method call safeguarded by a check for the existance of the object to safe navigation (`&.`).]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SelfAssignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for places where self-assignment shorthand should have been used.]]></name>
        <description><![CDATA[Checks for places where self-assignment shorthand should have been used.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Semicolon</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't use semicolons to terminate expressions.]]></name>
        <description><![CDATA[Don't use semicolons to terminate expressions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SignalException</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for proper usage of fail and raise.]]></name>
        <description><![CDATA[Checks for proper usage of fail and raise.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SingleLineMethods</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid single-line methods.]]></name>
        <description><![CDATA[Avoid single-line methods.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceBeforeFirstArg</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.]]></name>
        <description><![CDATA[Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAfterColon</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use spaces after colons.]]></name>
        <description><![CDATA[Use spaces after colons.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAfterComma</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use spaces after commas.]]></name>
        <description><![CDATA[Use spaces after commas.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAfterMethodName</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not put a space between a method name and the opening parenthesis in a method definition.]]></name>
        <description><![CDATA[Do not put a space between a method name and the opening parenthesis in a method definition.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAfterNot</key>
        <priority>MINOR</priority>
        <name><![CDATA[Tracks redundant space after the ! operator.]]></name>
        <description><![CDATA[Tracks redundant space after the ! operator.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAfterSemicolon</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use spaces after semicolons.]]></name>
        <description><![CDATA[Use spaces after semicolons.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceBeforeBlockBraces</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that the left block brace has or doesn't have space before it.]]></name>
        <description><![CDATA[Checks that the left block brace has or doesn't have space before it.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceBeforeComma</key>
        <priority>MINOR</priority>
        <name><![CDATA[No spaces before commas.]]></name>
        <description><![CDATA[No spaces before commas.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceBeforeComment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for missing space between code and a comment on the same line.]]></name>
        <description><![CDATA[Checks for missing space between code and a comment on the same line.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceBeforeSemicolon</key>
        <priority>MINOR</priority>
        <name><![CDATA[No spaces before semicolons.]]></name>
        <description><![CDATA[No spaces before semicolons.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInsideBlockBraces</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that block braces have or don't have surrounding space. For blocks taking parameters, checks that the left brace has or doesn't have trailing space.]]></name>
        <description><![CDATA[Checks that block braces have or don't have surrounding space. For blocks taking parameters, checks that the left brace has or doesn't have trailing space.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAroundBlockParameters</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the spacing inside and after block parameters pipes.]]></name>
        <description><![CDATA[Checks the spacing inside and after block parameters pipes.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAroundEqualsInParameterDefault</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.]]></name>
        <description><![CDATA[Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAroundKeyword</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use a space around keywords if appropriate.]]></name>
        <description><![CDATA[Use a space around keywords if appropriate.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceAroundOperators</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use a single space around operators.]]></name>
        <description><![CDATA[Use a single space around operators.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInsideArrayPercentLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[No unnecessary additional spaces between elements in %i/%w literals.]]></name>
        <description><![CDATA[No unnecessary additional spaces between elements in %i/%w literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInsidePercentLiteralDelimiters</key>
        <priority>MINOR</priority>
        <name><![CDATA[No unnecessary spaces inside delimiters of %i/%w/%x literals.]]></name>
        <description><![CDATA[No unnecessary spaces inside delimiters of %i/%w/%x literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInsideBrackets</key>
        <priority>MINOR</priority>
        <name><![CDATA[No spaces after [ or before ].]]></name>
        <description><![CDATA[No spaces after [ or before ].]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInsideHashLiteralBraces</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use spaces inside hash literal braces - or don't.]]></name>
        <description><![CDATA[Use spaces inside hash literal braces - or don't.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInsideParens</key>
        <priority>MINOR</priority>
        <name><![CDATA[No spaces after ( or before ).]]></name>
        <description><![CDATA[No spaces after ( or before ).]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInsideRangeLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[No spaces inside range literals.]]></name>
        <description><![CDATA[No spaces inside range literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpaceInsideStringInterpolation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for padding/surrounding spaces inside string interpolation.]]></name>
        <description><![CDATA[Checks for padding/surrounding spaces inside string interpolation.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SpecialGlobalVars</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid Perl-style global variables.]]></name>
        <description><![CDATA[Avoid Perl-style global variables.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/StabbyLambdaParentheses</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for the usage of parentheses around stabby lambda arguments.]]></name>
        <description><![CDATA[Check for the usage of parentheses around stabby lambda arguments.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/StringLiterals</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks if uses of quotes match the configured preference.]]></name>
        <description><![CDATA[Checks if uses of quotes match the configured preference.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/StringLiteralsInInterpolation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks if uses of quotes inside expressions in interpolated strings match the configured preference.]]></name>
        <description><![CDATA[Checks if uses of quotes inside expressions in interpolated strings match the configured preference.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/StructInheritance</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for inheritance from Struct.new.]]></name>
        <description><![CDATA[Checks for inheritance from Struct.new.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SymbolLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use plain symbols instead of string symbols when possible.]]></name>
        <description><![CDATA[Use plain symbols instead of string symbols when possible.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/SymbolProc</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use symbols as procs instead of blocks when possible.]]></name>
        <description><![CDATA[Use symbols as procs instead of blocks when possible.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/Tab</key>
        <priority>MINOR</priority>
        <name><![CDATA[No hard tabs.]]></name>
        <description><![CDATA[No hard tabs.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/TernaryParentheses</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for use of parentheses around ternary conditions.]]></name>
        <description><![CDATA[Checks for use of parentheses around ternary conditions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/TrailingBlankLines</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks trailing blank lines and final newline.]]></name>
        <description><![CDATA[Checks trailing blank lines and final newline.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/TrailingCommaInArguments</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for trailing comma in argument lists.]]></name>
        <description><![CDATA[Checks for trailing comma in argument lists.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/TrailingCommaInLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for trailing comma in array and hash literals.]]></name>
        <description><![CDATA[Checks for trailing comma in array and hash literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/TrailingWhitespace</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid trailing whitespace.]]></name>
        <description><![CDATA[Avoid trailing whitespace.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/TrivialAccessors</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer attr_* methods to trivial readers/writers.]]></name>
        <description><![CDATA[Prefer attr_* methods to trivial readers/writers.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/UnlessElse</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use unless with else. Rewrite these with the positive case first.]]></name>
        <description><![CDATA[Do not use unless with else. Rewrite these with the positive case first.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/UnneededCapitalW</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for %W when interpolation is not needed.]]></name>
        <description><![CDATA[Checks for %W when interpolation is not needed.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/UnneededInterpolation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for strings that are just an interpolated expression.]]></name>
        <description><![CDATA[Checks for strings that are just an interpolated expression.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/UnneededPercentQ</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for %q/%Q when single quotes or double quotes would do.]]></name>
        <description><![CDATA[Checks for %q/%Q when single quotes or double quotes would do.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/TrailingUnderscoreVariable</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.]]></name>
        <description><![CDATA[Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/VariableInterpolation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't interpolate global, instance and class variables directly in strings.]]></name>
        <description><![CDATA[Don't interpolate global, instance and class variables directly in strings.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/VariableName</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use the configured style when naming variables.]]></name>
        <description><![CDATA[Use the configured style when naming variables.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/VariableNumber</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use the configured style when numbering variables.]]></name>
        <description><![CDATA[Use the configured style when numbering variables.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/WhenThen</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use when x then ... for one-line cases.]]></name>
        <description><![CDATA[Use when x then ... for one-line cases.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/WhileUntilDo</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for redundant do after while or until.]]></name>
        <description><![CDATA[Checks for redundant do after while or until.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/WhileUntilModifier</key>
        <priority>MINOR</priority>
        <name><![CDATA[Favor modifier while/until usage when you have a single-line body.]]></name>
        <description><![CDATA[Favor modifier while/until usage when you have a single-line body.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/WordArray</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use %w or %W for arrays of words.]]></name>
        <description><![CDATA[Use %w or %W for arrays of words.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Style/ZeroLengthPredicate</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use #empty? when testing for objects of length 0.]]></name>
        <description><![CDATA[Use #empty? when testing for objects of length 0.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/AbcSize</key>
        <priority>INFO</priority>
        <name><![CDATA[A calculated magnitude based on number of assignments, branches, and conditions.]]></name>
        <description><![CDATA[A calculated magnitude based on number of assignments, branches, and conditions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/BlockNesting</key>
        <priority>INFO</priority>
        <name><![CDATA[Avoid excessive block nesting]]></name>
        <description><![CDATA[Avoid excessive block nesting]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/ClassLength</key>
        <priority>INFO</priority>
        <name><![CDATA[Avoid classes longer than 100 lines of code.]]></name>
        <description><![CDATA[Avoid classes longer than 100 lines of code.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/ModuleLength</key>
        <priority>INFO</priority>
        <name><![CDATA[Avoid modules longer than 100 lines of code.]]></name>
        <description><![CDATA[Avoid modules longer than 100 lines of code.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/CyclomaticComplexity</key>
        <priority>INFO</priority>
        <name><![CDATA[A complexity metric that is strongly correlated to the number of test cases needed to validate a method.]]></name>
        <description><![CDATA[A complexity metric that is strongly correlated to the number of test cases needed to validate a method.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/LineLength</key>
        <priority>INFO</priority>
        <name><![CDATA[Limit lines to 80 characters.]]></name>
        <description><![CDATA[Limit lines to 80 characters.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/MethodLength</key>
        <priority>INFO</priority>
        <name><![CDATA[Avoid methods longer than 10 lines of code.]]></name>
        <description><![CDATA[Avoid methods longer than 10 lines of code.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/BlockLength</key>
        <priority>INFO</priority>
        <name><![CDATA[Avoid long blocks with many lines.]]></name>
        <description><![CDATA[Avoid long blocks with many lines.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/ParameterLists</key>
        <priority>INFO</priority>
        <name><![CDATA[Avoid parameter lists longer than three or four parameters.]]></name>
        <description><![CDATA[Avoid parameter lists longer than three or four parameters.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Metrics/PerceivedComplexity</key>
        <priority>INFO</priority>
        <name><![CDATA[A complexity metric geared towards measuring complexity for a human reader.]]></name>
        <description><![CDATA[A complexity metric geared towards measuring complexity for a human reader.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/AmbiguousOperator</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for ambiguous operators in the first argument of a method invocation without parentheses.]]></name>
        <description><![CDATA[Checks for ambiguous operators in the first argument of a method invocation without parentheses.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/AmbiguousRegexpLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.]]></name>
        <description><![CDATA[Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/AssignmentInCondition</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't use assignment in conditions.]]></name>
        <description><![CDATA[Don't use assignment in conditions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/BlockAlignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Align block ends correctly.]]></name>
        <description><![CDATA[Align block ends correctly.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/CircularArgumentReference</key>
        <priority>MINOR</priority>
        <name><![CDATA[Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.]]></name>
        <description><![CDATA[Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/ConditionPosition</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for condition placed in a confusing position relative to the keyword.]]></name>
        <description><![CDATA[Checks for condition placed in a confusing position relative to the keyword.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/Debugger</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for debugger calls.]]></name>
        <description><![CDATA[Check for debugger calls.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/DefEndAlignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Align ends corresponding to defs correctly.]]></name>
        <description><![CDATA[Align ends corresponding to defs correctly.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/DeprecatedClassMethods</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for deprecated class method calls.]]></name>
        <description><![CDATA[Check for deprecated class method calls.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/DuplicateCaseCondition</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not repeat values in case conditionals.]]></name>
        <description><![CDATA[Do not repeat values in case conditionals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/DuplicateMethods</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for duplicate method definitions.]]></name>
        <description><![CDATA[Check for duplicate method definitions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/DuplicatedKey</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for duplicate keys in hash literals.]]></name>
        <description><![CDATA[Check for duplicate keys in hash literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/EachWithObjectArgument</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for immutable argument given to each_with_object.]]></name>
        <description><![CDATA[Check for immutable argument given to each_with_object.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/ElseLayout</key>
        <priority>MINOR</priority>
        <name><![CDATA[Check for odd code arrangement in an else block.]]></name>
        <description><![CDATA[Check for odd code arrangement in an else block.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/EmptyEnsure</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for empty ensure block.]]></name>
        <description><![CDATA[Checks for empty ensure block.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/EmptyExpression</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for empty expressions.]]></name>
        <description><![CDATA[Checks for empty expressions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/EmptyInterpolation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for empty string interpolation.]]></name>
        <description><![CDATA[Checks for empty string interpolation.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/EmptyWhen</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for `when` branches with empty bodies.]]></name>
        <description><![CDATA[Checks for `when` branches with empty bodies.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/EndAlignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Align ends correctly.]]></name>
        <description><![CDATA[Align ends correctly.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/EndInMethod</key>
        <priority>MINOR</priority>
        <name><![CDATA[END blocks should not be placed inside method definitions.]]></name>
        <description><![CDATA[END blocks should not be placed inside method definitions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/EnsureReturn</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use return in an ensure block.]]></name>
        <description><![CDATA[Do not use return in an ensure block.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/FloatOutOfRange</key>
        <priority>MINOR</priority>
        <name><![CDATA[Catches floating-point literals too large or small for Ruby to represent.]]></name>
        <description><![CDATA[Catches floating-point literals too large or small for Ruby to represent.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/FormatParameterMismatch</key>
        <priority>MINOR</priority>
        <name><![CDATA[The number of parameters to format/sprint must match the fields.]]></name>
        <description><![CDATA[The number of parameters to format/sprint must match the fields.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/HandleExceptions</key>
        <priority>MINOR</priority>
        <name><![CDATA[Don't suppress exception.]]></name>
        <description><![CDATA[Don't suppress exception.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/ImplicitStringConcatenation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for adjacent string literals on the same line, which could better be represented as a single string literal.]]></name>
        <description><![CDATA[Checks for adjacent string literals on the same line, which could better be represented as a single string literal.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/IneffectiveAccessModifier</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.]]></name>
        <description><![CDATA[Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/InheritException</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid inheriting from the `Exception` class.]]></name>
        <description><![CDATA[Avoid inheriting from the `Exception` class.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/InvalidCharacterLiteral</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for invalid character literals with a non-escaped whitespace character.]]></name>
        <description><![CDATA[Checks for invalid character literals with a non-escaped whitespace character.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/LiteralInCondition</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks of literals used in conditions.]]></name>
        <description><![CDATA[Checks of literals used in conditions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/LiteralInInterpolation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for literals used in interpolation.]]></name>
        <description><![CDATA[Checks for literals used in interpolation.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/Loop</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.]]></name>
        <description><![CDATA[Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/MultipleCompare</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `&&` operator to compare multiple value.]]></name>
        <description><![CDATA[Use `&&` operator to compare multiple value.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/NestedMethodDefinition</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use nested method definitions.]]></name>
        <description><![CDATA[Do not use nested method definitions.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/NextWithoutAccumulator</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.]]></name>
        <description><![CDATA[Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/NonLocalExitFromIterator</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use return in iterator to cause non-local exit.]]></name>
        <description><![CDATA[Do not use return in iterator to cause non-local exit.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/ParenthesesAsGroupedExpression</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for method calls with a space before the opening parenthesis.]]></name>
        <description><![CDATA[Checks for method calls with a space before the opening parenthesis.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/PercentStringArray</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for unwanted commas and quotes in %w/%W literals.]]></name>
        <description><![CDATA[Checks for unwanted commas and quotes in %w/%W literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/PercentSymbolArray</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for unwanted commas and colons in %i/%I literals.]]></name>
        <description><![CDATA[Checks for unwanted commas and colons in %i/%I literals.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/RandOne</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.]]></name>
        <description><![CDATA[Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/RequireParentheses</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use parentheses in the method call to avoid confusion about precedence.]]></name>
        <description><![CDATA[Use parentheses in the method call to avoid confusion about precedence.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/RescueException</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid rescuing the Exception class.]]></name>
        <description><![CDATA[Avoid rescuing the Exception class.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/SafeNavigationChain</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not chain ordinary method call after safe navigation operator.]]></name>
        <description><![CDATA[Do not chain ordinary method call after safe navigation operator.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/ShadowedException</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid rescuing a higher level exception before a lower level exception.]]></name>
        <description><![CDATA[Avoid rescuing a higher level exception before a lower level exception.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/ShadowingOuterLocalVariable</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use the same name as outer local variable for block arguments or block local variables.]]></name>
        <description><![CDATA[Do not use the same name as outer local variable for block arguments or block local variables.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/StringConversionInInterpolation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for Object#to_s usage in string interpolation.]]></name>
        <description><![CDATA[Checks for Object#to_s usage in string interpolation.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UnderscorePrefixedVariableName</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use prefix `_` for a variable that is used.]]></name>
        <description><![CDATA[Do not use prefix `_` for a variable that is used.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UnifiedInteger</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use Integer instead of Fixnum or Bignum]]></name>
        <description><![CDATA[Use Integer instead of Fixnum or Bignum]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UnneededDisable</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for rubocop:disable comments that can be removed. Note: this cop is not disabled when disabling all cops. It must be explicitly disabled.]]></name>
        <description><![CDATA[Checks for rubocop:disable comments that can be removed. Note: this cop is not disabled when disabling all cops. It must be explicitly disabled.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UnneededSplatExpansion</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for splat unnecessarily being called on literals]]></name>
        <description><![CDATA[Checks for splat unnecessarily being called on literals]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UnusedBlockArgument</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for unused block arguments.]]></name>
        <description><![CDATA[Checks for unused block arguments.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UnusedMethodArgument</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for unused method arguments.]]></name>
        <description><![CDATA[Checks for unused method arguments.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UnreachableCode</key>
        <priority>MINOR</priority>
        <name><![CDATA[Unreachable code.]]></name>
        <description><![CDATA[Unreachable code.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UselessAccessModifier</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for useless access modifiers.]]></name>
        <description><![CDATA[Checks for useless access modifiers.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UselessAssignment</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for useless assignment to a local variable.]]></name>
        <description><![CDATA[Checks for useless assignment to a local variable.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UselessComparison</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for comparison of something with itself.]]></name>
        <description><![CDATA[Checks for comparison of something with itself.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UselessElseWithoutRescue</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for useless `else` in `begin..end` without `rescue`.]]></name>
        <description><![CDATA[Checks for useless `else` in `begin..end` without `rescue`.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/UselessSetterCall</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for useless setter call to a local variable.]]></name>
        <description><![CDATA[Checks for useless setter call to a local variable.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Lint/Void</key>
        <priority>MINOR</priority>
        <name><![CDATA[Possible use of operator/literal/variable in void context.]]></name>
        <description><![CDATA[Possible use of operator/literal/variable in void context.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/Casecmp</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..]]></name>
        <description><![CDATA[Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/CaseWhenSplat</key>
        <priority>MINOR</priority>
        <name><![CDATA[Place `when` conditions that use splat at the end of the list of `when` branches.]]></name>
        <description><![CDATA[Place `when` conditions that use splat at the end of the list of `when` branches.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/Count</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `count` instead of `select...size`, `reject...size`, `select...count`, `reject...count`, `select...length`, and `reject...length`.]]></name>
        <description><![CDATA[Use `count` instead of `select...size`, `reject...size`, `select...count`, `reject...count`, `select...length`, and `reject...length`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/Detect</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `detect` instead of `select.first`, `find_all.first`, `select.last`, and `find_all.last`.]]></name>
        <description><![CDATA[Use `detect` instead of `select.first`, `find_all.first`, `select.last`, and `find_all.last`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/DoubleStartEndWith</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `str.{start,end}_with?(x, ..., y, ...)` instead of `str.{start,end}_with?(x, ...) || str.{start,end}_with?(y, ...)`.]]></name>
        <description><![CDATA[Use `str.{start,end}_with?(x, ..., y, ...)` instead of `str.{start,end}_with?(x, ...) || str.{start,end}_with?(y, ...)`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/EndWith</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `end_with?` instead of a regex match anchored to the end of a string.]]></name>
        <description><![CDATA[Use `end_with?` instead of a regex match anchored to the end of a string.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/FixedSize</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not compute the size of statically sized objects except in constants]]></name>
        <description><![CDATA[Do not compute the size of statically sized objects except in constants]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/FlatMap</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `Enumerable#flat_map` instead of `Enumerable#map...Array#flatten(1)` or `Enumberable#collect..Array#flatten(1)`]]></name>
        <description><![CDATA[Use `Enumerable#flat_map` instead of `Enumerable#map...Array#flatten(1)` or `Enumberable#collect..Array#flatten(1)`]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/HashEachMethods</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `Hash#each_key` and `Hash#each_value` instead of `Hash#keys.each` and `Hash#values.each`.]]></name>
        <description><![CDATA[Use `Hash#each_key` and `Hash#each_value` instead of `Hash#keys.each` and `Hash#values.each`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/LstripRstrip</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `strip` instead of `lstrip.rstrip`.]]></name>
        <description><![CDATA[Use `strip` instead of `lstrip.rstrip`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/RangeInclude</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `Range#cover?` instead of `Range#include?`.]]></name>
        <description><![CDATA[Use `Range#cover?` instead of `Range#include?`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/RedundantBlockCall</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `yield` instead of `block.call`.]]></name>
        <description><![CDATA[Use `yield` instead of `block.call`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/RedundantMatch</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `=~` instead of `String#match` or `Regexp#match` in a context where the returned `MatchData` is not needed.]]></name>
        <description><![CDATA[Use `=~` instead of `String#match` or `Regexp#match` in a context where the returned `MatchData` is not needed.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/RedundantMerge</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use Hash#[]=, rather than Hash#merge! with a single key-value pair.]]></name>
        <description><![CDATA[Use Hash#[]=, rather than Hash#merge! with a single key-value pair.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/RedundantSortBy</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `sort` instead of `sort_by { |x| x }`.]]></name>
        <description><![CDATA[Use `sort` instead of `sort_by { |x| x }`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/RegexpMatch</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`, `Regexp#===`, or `=~` when `MatchData` is not used.]]></name>
        <description><![CDATA[Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`, `Regexp#===`, or `=~` when `MatchData` is not used.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/ReverseEach</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `reverse_each` instead of `reverse.each`.]]></name>
        <description><![CDATA[Use `reverse_each` instead of `reverse.each`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/Sample</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.]]></name>
        <description><![CDATA[Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/Size</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `size` instead of `count` for counting the number of elements in `Array` and `Hash`.]]></name>
        <description><![CDATA[Use `size` instead of `count` for counting the number of elements in `Array` and `Hash`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/CompareWithBlock</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `sort_by(&:foo)` instead of `sort_by { |a, b| a.foo <=> b.foo }`.]]></name>
        <description><![CDATA[Use `sort_by(&:foo)` instead of `sort_by { |a, b| a.foo <=> b.foo }`.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/StartWith</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `start_with?` instead of a regex match anchored to the beginning of a string.]]></name>
        <description><![CDATA[Use `start_with?` instead of a regex match anchored to the beginning of a string.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/StringReplacement</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `tr` instead of `gsub` when you are replacing the same number of characters. Use `delete` instead of `gsub` when you are deleting characters.]]></name>
        <description><![CDATA[Use `tr` instead of `gsub` when you are replacing the same number of characters. Use `delete` instead of `gsub` when you are deleting characters.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Performance/TimesMap</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for .times.map calls.]]></name>
        <description><![CDATA[Checks for .times.map calls.]]></description>
        <type>BUG</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/ActionFilter</key>
        <priority>MINOR</priority>
        <name><![CDATA[Enforces consistent use of action filter methods.]]></name>
        <description><![CDATA[Enforces consistent use of action filter methods.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/Date</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the correct usage of date aware methods, such as Date.today, Date.current etc.]]></name>
        <description><![CDATA[Checks the correct usage of date aware methods, such as Date.today, Date.current etc.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/Delegate</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer delegate method for delegations.]]></name>
        <description><![CDATA[Prefer delegate method for delegations.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/DelegateAllowBlank</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not use allow_blank as an option to delegate.]]></name>
        <description><![CDATA[Do not use allow_blank as an option to delegate.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/DynamicFindBy</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `find_by` instead of dynamic `find_by_*`.]]></name>
        <description><![CDATA[Use `find_by` instead of dynamic `find_by_*`.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/EnumUniqueness</key>
        <priority>MINOR</priority>
        <name><![CDATA[Avoid duplicate integers in hash-syntax `enum` declaration.]]></name>
        <description><![CDATA[Avoid duplicate integers in hash-syntax `enum` declaration.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/Exit</key>
        <priority>MINOR</priority>
        <name><![CDATA[Favor `fail`, `break`, `return`, etc. over `exit` in application or library code outside of Rake files to avoid exits during unit testing or running in production.]]></name>
        <description><![CDATA[Favor `fail`, `break`, `return`, etc. over `exit` in application or library code outside of Rake files to avoid exits during unit testing or running in production.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/FilePath</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use `Rails.root.join` for file path joining.]]></name>
        <description><![CDATA[Use `Rails.root.join` for file path joining.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/FindBy</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer find_by over where.first.]]></name>
        <description><![CDATA[Prefer find_by over where.first.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/FindEach</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer all.find_each over all.find.]]></name>
        <description><![CDATA[Prefer all.find_each over all.find.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/HasAndBelongsToMany</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer has_many :through to has_and_belongs_to_many.]]></name>
        <description><![CDATA[Prefer has_many :through to has_and_belongs_to_many.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/HttpPositionalArguments</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use keyword arguments instead of positional arguments in http method calls.]]></name>
        <description><![CDATA[Use keyword arguments instead of positional arguments in http method calls.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/NotNullColumn</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not add a NOT NULL column without a default value]]></name>
        <description><![CDATA[Do not add a NOT NULL column without a default value]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/Output</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for calls to puts, print, etc.]]></name>
        <description><![CDATA[Checks for calls to puts, print, etc.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/OutputSafety</key>
        <priority>MINOR</priority>
        <name><![CDATA[The use of `html_safe` or `raw` may be a security risk.]]></name>
        <description><![CDATA[The use of `html_safe` or `raw` may be a security risk.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/PluralizationGrammar</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for incorrect grammar when using methods like `3.day.ago`.]]></name>
        <description><![CDATA[Checks for incorrect grammar when using methods like `3.day.ago`.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/ReadWriteAttribute</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks for read_attribute(:attr) and write_attribute(:attr, val).]]></name>
        <description><![CDATA[Checks for read_attribute(:attr) and write_attribute(:attr, val).]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/RelativeDateConstant</key>
        <priority>MINOR</priority>
        <name><![CDATA[Do not assign relative date to constants.]]></name>
        <description><![CDATA[Do not assign relative date to constants.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/RequestReferer</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use consistent syntax for request.referer.]]></name>
        <description><![CDATA[Use consistent syntax for request.referer.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/ReversibleMigration</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks whether the change method of the migration file is reversible.]]></name>
        <description><![CDATA[Checks whether the change method of the migration file is reversible.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/SafeNavigation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use Ruby's safe navigation operator (`&.`) instead of `try!`]]></name>
        <description><![CDATA[Use Ruby's safe navigation operator (`&.`) instead of `try!`]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/ScopeArgs</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the arguments of ActiveRecord scopes.]]></name>
        <description><![CDATA[Checks the arguments of ActiveRecord scopes.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/TimeZone</key>
        <priority>MINOR</priority>
        <name><![CDATA[Checks the correct usage of time zone aware methods.]]></name>
        <description><![CDATA[Checks the correct usage of time zone aware methods.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/UniqBeforePluck</key>
        <priority>MINOR</priority>
        <name><![CDATA[Prefer the use of uniq or distinct before pluck.]]></name>
        <description><![CDATA[Prefer the use of uniq or distinct before pluck.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/SkipsModelValidations</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use methods that skips model validations with caution. See reference for more information.]]></name>
        <description><![CDATA[Use methods that skips model validations with caution. See reference for more information.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Rails/Validation</key>
        <priority>MINOR</priority>
        <name><![CDATA[Use validates :attribute, hash of validations.]]></name>
        <description><![CDATA[Use validates :attribute, hash of validations.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Security/Eval</key>
        <priority>CRITICAL</priority>
        <name><![CDATA[The use of eval represents a serious security risk.]]></name>
        <description><![CDATA[The use of eval represents a serious security risk.]]></description>
        <type>VULNERABILITY</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Security/JSONLoad</key>
        <priority>CRITICAL</priority>
        <name><![CDATA[Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.]]></name>
        <description><![CDATA[Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.]]></description>
        <type>VULNERABILITY</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Security/MarshalLoad</key>
        <priority>CRITICAL</priority>
        <name><![CDATA[Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.]]></name>
        <description><![CDATA[Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.]]></description>
        <type>VULNERABILITY</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Security/YAMLLoad</key>
        <priority>CRITICAL</priority>
        <name><![CDATA[Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.]]></name>
        <description><![CDATA[Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.]]></description>
        <type>VULNERABILITY</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Bundler/DuplicatedGem</key>
        <priority>INFO</priority>
        <name><![CDATA[Checks for duplicate gem entries in Gemfile.]]></name>
        <description><![CDATA[Checks for duplicate gem entries in Gemfile.]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

    <rule>
        <key>Bundler/OrderedGems</key>
        <priority>INFO</priority>
        <name><![CDATA[Sort alphabetically gems appearing within a contiguous set of lines in the Gemfile]]></name>
        <description><![CDATA[Sort alphabetically gems appearing within a contiguous set of lines in the Gemfile]]></description>
        <type>CODE_SMELL</type>
        <status>READY</status>
    </rule>

</rules>
